#ifndef C_DV_SUBCODE_H
#define C_DV_SUBCODE_H

//====================================================================================================
//класс работы с секцией subcode для dv-формата
//====================================================================================================

//====================================================================================================
//подключаемые библиотеки
//====================================================================================================

#include <stdint.h>
#include "cdvdifid.h"
#include "cdvtime.h"
#include "ctimecode.h"

//====================================================================================================
//класс работы с секцией subcode для dv-формата
//====================================================================================================
class CDVSubCode
{
 public:
  //-Перечисления---------------------------------------------------------------------------------------
  //-Структуры------------------------------------------------------------------------------------------
  //биты внутри байта структуры заполняются от младшего к старшему! В документации они приведены наоборот!
  #pragma pack(1) 
  //половины канала используются в режиме 50 Мбит/сек - там две половины канала. В режиме 25 Мбит/сек одина половина канала
  struct SSSYBID_0_6
  {
   //байт 0
   uint8_t Arb1:4;//произвольные данные
   uint8_t AP3:3;
   uint8_t FR:1;//идентификатор первой или второй половины канала (1-первая половина)
   //байт 1
   uint8_t Syb:4;
   uint8_t Arb2:4;//произвольные данные
  };
  struct SSSYBID_1to5_7to10
  {
   //байт 0
   uint8_t Arb1:4;//произвольные данные
   uint8_t Res:3;//зарезервировано (все биты 1)
   uint8_t FR:1;//идентификатор первой или второй половины канала (1-первая половина)
   //байт 1
   uint8_t Syb:4;
   uint8_t Arb2:4;//произвольные данные
  };
  struct SSSYBID_11
  {
   //байт 0
   uint8_t Arb1:4;//произвольные данные
   uint8_t APT:3;
   uint8_t FR:1;//идентификатор первой или второй половины канала (1-первая половина)
   //байт 1
   uint8_t Syb:4;
   uint8_t Arb2:4;//произвольные данные
  };
  //идентификатор SSYB-блока
  union USSYBID
  {
   SSSYBID_0_6 sSSYBID_0_6;//для SSYB 0 или 6
   SSSYBID_1to5_7to10 sSSYBID_1to5_7to10;//для SSYB от 1 до 5 и от 7 до 10
   SSSYBID_11 sSSYBID_11;//для SSYB 11
  };
  //SSYB-блок
  struct SSSYB
  {
   USSYBID uSSYBID;//идентификатор
   uint8_t FFByte;//байт 0xff
   uint8_t Data[5];//данные SSYB-блока
  };
  //DIF-блок
  struct SSubCodeDIF
  {
   CDVDIFID::SDIFID sDIFID;//идентификатор DIF-блока
   SSSYB sSSYB[6];
   //байты 51..79
   uint8_t ResArray[29];//зарезервировано (все биты в 1)
  };
  //данные суб-кодов
  struct SSubCode
  {
   SSubCodeDIF sSubCodeDIF[2];//два DIF блока в данных суб-кодов
  };
  #pragma pack()
 private:
  //-Переменные-----------------------------------------------------------------------------------------  
  CDVDIFID cDVDIFID;
  CTimeCode cTimeCode;
 public:
  //-Конструктор класса---------------------------------------------------------------------------------
  CDVSubCode(void);
  //-Деструктор класса----------------------------------------------------------------------------------
  ~CDVSubCode();
 public:
  //-Открытые функции класса----------------------------------------------------------------------------
  void Set(SSubCode *sSubCode_Ptr,uint8_t dif_sequence,uint32_t frame,const CDVTime &cDVTime_CurrentTime,const CDVTime &cDVTime_VideoTime,bool is_pal);//задать секцию субкодов
  void OutputToFile(FILE *file,const std::string &prefix,bool is_pal,SSubCode *sSubCode_Ptr);//вывести в файл параметры секции
  static uint32_t GetSectionSize(void);//получить размер секции в байтах
  //-Закрытые функции класса----------------------------------------------------------------------------
};

#endif

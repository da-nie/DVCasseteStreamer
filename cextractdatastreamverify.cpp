//====================================================================================================
//подключаемые библиотеки
//====================================================================================================
#include "cextractdatastreamverify.h"
#include "stdafx.h"

//====================================================================================================
//глобальные переменные
//====================================================================================================

//====================================================================================================
//конструктор класса
//====================================================================================================
CExtractDataStreamVerify::CExtractDataStreamVerify(void)
{ 
 SetBreak(false);
}
//====================================================================================================
//деструктор класса
//====================================================================================================
CExtractDataStreamVerify::~CExtractDataStreamVerify()
{
 Close();
}

//====================================================================================================
//закрытые функции класса
//====================================================================================================

//====================================================================================================
//открытые функции класса
//====================================================================================================

//----------------------------------------------------------------------------------------------------
//создать файл
//----------------------------------------------------------------------------------------------------
bool CExtractDataStreamVerify::Create(const std::string &file_name)
{
 return(true);
}
//----------------------------------------------------------------------------------------------------
//закрыть файл
//----------------------------------------------------------------------------------------------------
void CExtractDataStreamVerify::Close(void)
{
}
//----------------------------------------------------------------------------------------------------
//записать данные в файл
//----------------------------------------------------------------------------------------------------
bool CExtractDataStreamVerify::Write(uint8_t *buffer_ptr,size_t size)
{
 return(true);
}
//----------------------------------------------------------------------------------------------------
//добавить к ответу строку
//----------------------------------------------------------------------------------------------------
void CExtractDataStreamVerify::AddAnswer(const std::string &answer)
{
 CRAIICCriticalSection cRAIICCriticalSection(&sProtected.cCriticalSection);
 {
  sProtected.Answer+=answer;
 }
}
//----------------------------------------------------------------------------------------------------
//получить ответ
//----------------------------------------------------------------------------------------------------
void CExtractDataStreamVerify::GetAnswer(std::string &answer)
{
 CRAIICCriticalSection cRAIICCriticalSection(&sProtected.cCriticalSection);
 {
  answer=sProtected.Answer;
 }
}
//----------------------------------------------------------------------------------------------------
//очистить ответ
//----------------------------------------------------------------------------------------------------
void CExtractDataStreamVerify::ClearAnswer(void)
{
 CRAIICCriticalSection cRAIICCriticalSection(&sProtected.cCriticalSection);
 {
  sProtected.Answer="";
 }
}
//----------------------------------------------------------------------------------------------------
//получить ответ и очистить его
//----------------------------------------------------------------------------------------------------
void CExtractDataStreamVerify::GetAndClearAnswer(std::string &answer)
{
 CRAIICCriticalSection cRAIICCriticalSection(&sProtected.cCriticalSection);
 {
  answer=sProtected.Answer;
  sProtected.Answer="";
 }
}
//----------------------------------------------------------------------------------------------------
//нужно ли завершать обработку
//----------------------------------------------------------------------------------------------------
bool CExtractDataStreamVerify::IsBreak(void)
{
 CRAIICCriticalSection cRAIICCriticalSection(&sProtected.cCriticalSection);
 {
  return(sProtected.Break);
 }
}
//----------------------------------------------------------------------------------------------------
//задать, требуется ли завершение обработки
//----------------------------------------------------------------------------------------------------
void CExtractDataStreamVerify::SetBreak(bool state)
{
 CRAIICCriticalSection cRAIICCriticalSection(&sProtected.cCriticalSection);
 {
  sProtected.Break=state;
 }
}

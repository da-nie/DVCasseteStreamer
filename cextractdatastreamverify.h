#ifndef C_EXTRACT_DATA_STREAM_VERIFY_H
#define C_EXTRACT_DATA_STREAM_VERIFY_H

//====================================================================================================
//класс работы с проверкой файлов
//====================================================================================================

//====================================================================================================
//подключаемые библиотеки
//====================================================================================================
#include <stdint.h>
#include <string>
#include "iextractdatastream.h"
#include "craiiccriticalsection.h"

//====================================================================================================
//класс работы с проверкой файлов
//====================================================================================================
class CExtractDataStreamVerify:public IExtractDataStream
{
 private:
  //-Переменные класса----------------------------------------------------------------------------------
  //защищённые переменные
  struct SProtected
  {
   std::string Answer;//ответ
   bool Break;//требуется ли завершение работы
   CCriticalSection cCriticalSection;//критическая секция для доступа к элементам
  } sProtected;  
public:
  //-Конструктор класса---------------------------------------------------------------------------------
  CExtractDataStreamVerify(void);
  //-Деструктор класса----------------------------------------------------------------------------------
  ~CExtractDataStreamVerify();
 public:
  //-Открытые функции класса----------------------------------------------------------------------------
  bool Create(const std::string &file_name);//создать файл
  void Close(void);//закрыть файл
  bool Write(uint8_t *buffer_ptr,size_t size);//записать данные в файл
  void AddAnswer(const std::string &answer);//добавить к ответу строку
  void GetAnswer(std::string &answer);//получить ответ
  void ClearAnswer(void);//очистить ответ
  void GetAndClearAnswer(std::string &answer);//получить ответ и очистить его
  bool IsBreak(void);//нужно ли завершать обработку
  void SetBreak(bool state);//задать, требуется ли завершение обработки
 private:
  //-Закрытые функции класса----------------------------------------------------------------------------  
};

#endif

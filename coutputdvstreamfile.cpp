//====================================================================================================
//подключаемые библиотеки
//====================================================================================================
#include "coutputdvstreamfile.h"

//====================================================================================================
//глобальные переменные
//====================================================================================================

//====================================================================================================
//конструктор класса
//====================================================================================================
COutputDVStreamFile::COutputDVStreamFile(void)
{ 
 SetBreak(false);
}
//====================================================================================================
//деструктор класса
//====================================================================================================
COutputDVStreamFile::~COutputDVStreamFile()
{
 Close();
}

//====================================================================================================
//закрытые функции класса
//====================================================================================================

//====================================================================================================
//открытые функции класса
//====================================================================================================

//----------------------------------------------------------------------------------------------------
//создать файл
//----------------------------------------------------------------------------------------------------
bool COutputDVStreamFile::Create(const std::string &file_name)
{
 cRAIIFileOut.Open(file_name,std::ios_base::out|std::ios_base::binary);
 return(cRAIIFileOut.IsOpened());
}
//----------------------------------------------------------------------------------------------------
//закрыть файл
//----------------------------------------------------------------------------------------------------
void COutputDVStreamFile::Close(void)
{
 cRAIIFileOut.Close();
}
//----------------------------------------------------------------------------------------------------
//добавить кадр
//----------------------------------------------------------------------------------------------------
bool COutputDVStreamFile::AddFrame(uint8_t *frame_buffer,size_t size)
{
 if (cRAIIFileOut.IsOpened()==false) return(false);
 if (cRAIIFileOut.GetHandle().write(reinterpret_cast<char*>(frame_buffer),sizeof(uint8_t)*size).fail()==true) return(false);
 return(true);
}
//----------------------------------------------------------------------------------------------------
//добавить к ответу строку
//----------------------------------------------------------------------------------------------------
void COutputDVStreamFile::AddAnswer(const std::string &answer)
{
 CRAIICCriticalSection cRAIICCriticalSection(&sProtected.cCriticalSection);
 {
  sProtected.Answer+=answer;
 }
}
//----------------------------------------------------------------------------------------------------
//получить ответ
//----------------------------------------------------------------------------------------------------
void COutputDVStreamFile::GetAnswer(std::string &answer)
{
 CRAIICCriticalSection cRAIICCriticalSection(&sProtected.cCriticalSection);
 {
  answer=sProtected.Answer;
 }
}
//----------------------------------------------------------------------------------------------------
//очистить ответ
//----------------------------------------------------------------------------------------------------
void COutputDVStreamFile::ClearAnswer(void)
{
 CRAIICCriticalSection cRAIICCriticalSection(&sProtected.cCriticalSection);
 {
  sProtected.Answer="";
 }
}
//----------------------------------------------------------------------------------------------------
//получить ответ и очистить его
//----------------------------------------------------------------------------------------------------
void COutputDVStreamFile::GetAndClearAnswer(std::string &answer)
{
 CRAIICCriticalSection cRAIICCriticalSection(&sProtected.cCriticalSection);
 {
  answer=sProtected.Answer;
  sProtected.Answer="";
 }
}
//----------------------------------------------------------------------------------------------------
//нужно ли завершать обработку
//----------------------------------------------------------------------------------------------------
bool COutputDVStreamFile::IsBreak(void)
{
 CRAIICCriticalSection cRAIICCriticalSection(&sProtected.cCriticalSection);
 {
  return(sProtected.Break);
 }
}
//----------------------------------------------------------------------------------------------------
//задать, требуется ли завершение обработки
//----------------------------------------------------------------------------------------------------
void COutputDVStreamFile::SetBreak(bool state)
{
 CRAIICCriticalSection cRAIICCriticalSection(&sProtected.cCriticalSection);
 {
  sProtected.Break=state;
 }
}
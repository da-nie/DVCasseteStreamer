//====================================================================================================
//подключаемые библиотеки
//====================================================================================================
#include "cextractdatastreamfilewindows.h"
#include "stdafx.h"

//====================================================================================================
//глобальные переменные
//====================================================================================================

//====================================================================================================
//конструктор класса
//====================================================================================================
CExtractDataStreamFileWindows::CExtractDataStreamFileWindows(void)
{ 
 SetExit(false);
}
//====================================================================================================
//деструктор класса
//====================================================================================================
CExtractDataStreamFileWindows::~CExtractDataStreamFileWindows()
{
 Close();
}

//====================================================================================================
//закрытые функции класса
//====================================================================================================

//====================================================================================================
//открытые функции класса
//====================================================================================================

//----------------------------------------------------------------------------------------------------
//создать файл
//----------------------------------------------------------------------------------------------------
bool CExtractDataStreamFileWindows::Create(const std::string &file_name)
{
 //создаём все требуемые каталоги
 std::string path="";
 size_t size=file_name.length();
 for(size_t n=0;n<size;n++)
 {
  char s=file_name.c_str()[n];
  if (s=='\\' || s=='/')
  {
   if (path.length()>0) 
   {
    CreateDirectory(path.c_str(),NULL);
   }
  }
  path+=s;
 } 
 cRAIIFileOut.Open(file_name,std::ios_base::out|std::ios_base::binary);
 return(cRAIIFileOut.IsOpened());
}
//----------------------------------------------------------------------------------------------------
//закрыть файл
//----------------------------------------------------------------------------------------------------
void CExtractDataStreamFileWindows::Close(void)
{
 cRAIIFileOut.Close();
}
//----------------------------------------------------------------------------------------------------
//записать данные в файл
//----------------------------------------------------------------------------------------------------
bool CExtractDataStreamFileWindows::Write(uint8_t *buffer_ptr,size_t size)
{
 if (cRAIIFileOut.IsOpened()==false) return(false);
 if (cRAIIFileOut.GetHandle().write(reinterpret_cast<char*>(buffer_ptr),sizeof(uint8_t)*size).fail()==true) return(false); 
 return(true);
}
//----------------------------------------------------------------------------------------------------
//добавить к ответу строку
//----------------------------------------------------------------------------------------------------
void CExtractDataStreamFileWindows::AddAnswer(const std::string &answer)
{
 CRAIICCriticalSection cRAIICCriticalSection(&sProtected.cCriticalSection);
 {
  sProtected.Answer+=answer;
 }
}
//----------------------------------------------------------------------------------------------------
//нужно ли завершать обработку
//----------------------------------------------------------------------------------------------------
bool CExtractDataStreamFileWindows::IsExit(void)
{
 CRAIICCriticalSection cRAIICCriticalSection(&sProtected.cCriticalSection);
 {
  return(sProtected.Exit);
 }
}
//----------------------------------------------------------------------------------------------------
//получить ответ
//----------------------------------------------------------------------------------------------------
void CExtractDataStreamFileWindows::GetAnswer(std::string &answer)
{
 CRAIICCriticalSection cRAIICCriticalSection(&sProtected.cCriticalSection);
 {
  answer=sProtected.Answer;
  sProtected.Answer="";
 }
}
//----------------------------------------------------------------------------------------------------
//очистить ответ
//----------------------------------------------------------------------------------------------------
void CExtractDataStreamFileWindows::ClearAnswer(void)
{
 CRAIICCriticalSection cRAIICCriticalSection(&sProtected.cCriticalSection);
 {
  sProtected.Answer="";
 }
}
//----------------------------------------------------------------------------------------------------
//задать, требуется ли завершение работы
//----------------------------------------------------------------------------------------------------
void CExtractDataStreamFileWindows::SetExit(bool state)
{
 CRAIICCriticalSection cRAIICCriticalSection(&sProtected.cCriticalSection);
 {
  sProtected.Exit=state;
 }
}
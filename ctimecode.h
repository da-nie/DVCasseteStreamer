#ifndef C_TIME_CODE_H
#define C_TIME_CODE_H

//====================================================================================================
//класс работы с временным кодом
//====================================================================================================

//====================================================================================================
//подключаемые библиотеки
//====================================================================================================

#include <stdint.h>
#include <stdio.h>
#include <string>

#include "cdvtime.h"

//====================================================================================================
//класс работы с временным кодом
//====================================================================================================
class CTimeCode
{
 public:
  //-Перечисления---------------------------------------------------------------------------------------
  //идентификатор
  enum TIME_CODE_VALUE
  {
   TIME_CODE_ID=0x13
  };
  //-Структуры------------------------------------------------------------------------------------------
  #pragma pack(1)
  //временой код (формат двоично-десятичный)
  //для NTSC
  struct STimeCodeNTSC
  {
   //байт 0
   uint8_t ID;//идентификатор
   //байт 1
   uint8_t UnitsOfFrames:4;//единицы кадра
   uint8_t TensOfFrames:2;//десятки кадра
   uint8_t DF:1;//флаг пропущенных кадров времени (0-нет, 1-есть)
   uint8_t CF:1;//цветной ли кадр (0-несинхронный режим, 1-синхронный режим)
   //байт 2
   uint8_t UnitsOfSecond:4;//единицы секунд
   uint8_t TensOfSecond:3;//десятки секунд
   uint8_t PC:1;//коррекция полярности фазы (0-чётный, 1-не чётный)
   //байт 3
   uint8_t UnitsOfMinutes:4;//единицы минут
   uint8_t TensOfMinutes:3;//десятки минут
   uint8_t BGF0:1;
   //байт 4
   uint8_t UnitsOfHours:4;//единицы часов
   uint8_t TensOfHours:2;//десятки часов
   uint8_t BGF1:1;
   uint8_t BGF2:1;
  };
  //для PAL
  struct STimeCodePAL
  {
   //байт 0
   uint8_t ID;//идентификатор
   //байт 1
   uint8_t UnitsOfFrames:4;//единицы кадра
   uint8_t TensOfFrames:2;//десятки кадра
   uint8_t Arb:1;//произвольный бит
   uint8_t CF:1;//цветной ли кадр (0-несинхронный режим, 1-синхронный режим)
   //байт 2
   uint8_t UnitsOfSecond:4;//единицы секунд
   uint8_t TensOfSecond:3;//десятки секунд
   uint8_t BGF0:1;//двоичный флаг группы
   //байт 3
   uint8_t UnitsOfMinutes:4;//единицы минут
   uint8_t TensOfMinutes:3;//десятки минут
   uint8_t BGF2:1;//двоичный флаг группы
   //байт 4
   uint8_t UnitsOfHours:4;//единицы часов
   uint8_t TensOfHours:2;//десятки часов
   uint8_t PC:1;
   uint8_t BGF1:1;//двоичный флаг группы
  };

  union UTimeCode
  {
   STimeCodePAL sTimeCodePAL;
   STimeCodeNTSC sTimeCodeNTSC;
  };
  #pragma pack()

 private:
  //-Переменные-----------------------------------------------------------------------------------------  
 public:
  //-Конструктор класса---------------------------------------------------------------------------------
  CTimeCode(void);
  //-Деструктор класса----------------------------------------------------------------------------------
  ~CTimeCode();
 public:
  //-Открытые функции класса----------------------------------------------------------------------------
  void Set(UTimeCode *uTimeCode_Ptr,const CDVTime &cDVTime_VideoTime,uint32_t frame,bool is_pal);//задать блок временного кода
  void OutputToFile(FILE *file,const std::string &prefix,bool is_pal,UTimeCode *uTimeCode_Ptr);//вывести в файл параметры временного кода
  //-Закрытые функции класса----------------------------------------------------------------------------
};

#endif
